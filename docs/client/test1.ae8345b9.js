import{S as e,i as n,s as t,e as r,t as s,a,c as o,b as i,d as h,f as c,g as l,h as f,j as u,k as d,n as p}from"./client.56c24277.js";import{w as v}from"./utils.932e656f.js";function g(e){let n,t,v,g,T,m,b,w,y,k,I,x,W,L,O,P,R,C,D,H,j,A,B,N,S,q,F,M,U,$,V,z,G,J,K,Q,X,Y,Z,_,ee,ne,te,re,se,ae,oe,ie,he,ce;return{c(){n=r("div"),t=r("h2"),v=s("Test "),g=s(E),T=s(" (single script element)"),m=a(),b=r("p"),w=s("This page shows that code within a script element is (at first)\n    run on the server and on the client."),y=a(),k=r("p"),I=s("When this page is displayed, the output of the server and the Web\n    console should look like (but please, ignore the \n    "),x=r("code"),W=s("Test#2"),L=s(" line for now):"),O=a(),P=r("center"),R=r("button"),C=r("a"),D=s("first page"),H=a(),j=r("button"),A=r("a"),B=s("next test"),N=a(),S=r("table"),q=r("tr"),F=r("th"),M=s("server"),U=r("th"),$=s("client"),V=a(),z=r("tr"),G=r("td"),J=r("pre"),K=s("> LF@0.0.1 dev\n> sapper dev\n\n✔ server (2.3s)\n✔ client (2.3s)\n✔ service worker (40ms)\nTest#2/context - I am running on server.\n> Listening on http://localhost:3000\nTest#1 - I am running on server.\n     "),Q=r("em"),X=s("return to first page then back here"),Y=a(),Z=r("td"),_=r("pre"),ee=s("Test#1 - I am running on client.\n     "),ne=r("em"),te=s("return to first page then back here"),re=s("\nTest#1 - I am running on client."),se=a(),ae=r("h2"),oe=s("Conclusion"),ie=a(),he=r("p"),ce=s("When the page is loaded, code runs on both side but, if you return\n    to `first page` (with the button) then back again to `first test`.\n    Only the client code is re-run. Server code is only run when the\n    page is initially loaded or re-loaded that is, when really\n    requested from the server. The `first page` button is processed on\n    the client only."),this.h()},l(e){n=o(e,"DIV",{});var r=i(n);t=o(r,"H2",{});var s=i(t);v=h(s,"Test "),g=h(s,E),T=h(s," (single script element)"),s.forEach(c),m=l(r),b=o(r,"P",{});var a=i(b);w=h(a,"This page shows that code within a script element is (at first)\n    run on the server and on the client."),a.forEach(c),y=l(r),k=o(r,"P",{});var f=i(k);I=h(f,"When this page is displayed, the output of the server and the Web\n    console should look like (but please, ignore the \n    "),x=o(f,"CODE",{});var u=i(x);W=h(u,"Test#2"),u.forEach(c),L=h(f," line for now):"),f.forEach(c),O=l(r),P=o(r,"CENTER",{});var d=i(P);R=o(d,"BUTTON",{});var p=i(R);C=o(p,"A",{href:!0});var le=i(C);D=h(le,"first page"),le.forEach(c),p.forEach(c),H=l(d),j=o(d,"BUTTON",{});var fe=i(j);A=o(fe,"A",{href:!0});var ue=i(A);B=h(ue,"next test"),ue.forEach(c),fe.forEach(c),d.forEach(c),N=l(r),S=o(r,"TABLE",{});var de=i(S);q=o(de,"TR",{});var pe=i(q);F=o(pe,"TH",{});var ve=i(F);M=h(ve,"server"),ve.forEach(c),U=o(pe,"TH",{});var ge=i(U);$=h(ge,"client"),ge.forEach(c),pe.forEach(c),V=l(de),z=o(de,"TR",{});var Ee=i(z);G=o(Ee,"TD",{});var Te=i(G);J=o(Te,"PRE",{});var me=i(J);K=h(me,"> LF@0.0.1 dev\n> sapper dev\n\n✔ server (2.3s)\n✔ client (2.3s)\n✔ service worker (40ms)\nTest#2/context - I am running on server.\n> Listening on http://localhost:3000\nTest#1 - I am running on server.\n     "),Q=o(me,"EM",{});var be=i(Q);X=h(be,"return to first page then back here"),be.forEach(c),me.forEach(c),Te.forEach(c),Y=l(Ee),Z=o(Ee,"TD",{});var we=i(Z);_=o(we,"PRE",{});var ye=i(_);ee=h(ye,"Test#1 - I am running on client.\n     "),ne=o(ye,"EM",{});var ke=i(ne);te=h(ke,"return to first page then back here"),ke.forEach(c),re=h(ye,"\nTest#1 - I am running on client."),ye.forEach(c),we.forEach(c),Ee.forEach(c),de.forEach(c),se=l(r),ae=o(r,"H2",{});var Ie=i(ae);oe=h(Ie,"Conclusion"),Ie.forEach(c),ie=l(r),he=o(r,"P",{});var xe=i(he);ce=h(xe,"When the page is loaded, code runs on both side but, if you return\n    to `first page` (with the button) then back again to `first test`.\n    Only the client code is re-run. Server code is only run when the\n    page is initially loaded or re-loaded that is, when really\n    requested from the server. The `first page` button is processed on\n    the client only."),xe.forEach(c),r.forEach(c),this.h()},h(){f(C,"href","/"),f(A,"href","test2")},m(e,r){u(e,n,r),d(n,t),d(t,v),d(t,g),d(t,T),d(n,m),d(n,b),d(b,w),d(n,y),d(n,k),d(k,I),d(k,x),d(x,W),d(k,L),d(n,O),d(n,P),d(P,R),d(R,C),d(C,D),d(P,H),d(P,j),d(j,A),d(A,B),d(n,N),d(n,S),d(S,q),d(q,F),d(F,M),d(q,U),d(U,$),d(S,V),d(S,z),d(z,G),d(G,J),d(J,K),d(J,Q),d(Q,X),d(z,Y),d(z,Z),d(Z,_),d(_,ee),d(_,ne),d(ne,te),d(_,re),d(n,se),d(n,ae),d(ae,oe),d(n,ie),d(n,he),d(he,ce)},p:p,i:p,o:p,d(e){e&&c(n)}}}let E=1;function T(e){return console.log(`Test#${E} - I am running on ${v()}.`),[]}export default class extends e{constructor(e){super(),n(this,e,T,g,t,{})}}
